<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode in JS (updating in 2022)</title>
      <link href="/2021/12/30/Leetcode%20Excel/"/>
      <url>/2021/12/30/Leetcode%20Excel/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-Excel"><a href="#Leetcode-Excel" class="headerlink" title="Leetcode Excel"></a>Leetcode Excel</h1><p>Faster updates on <a href="https://github.com/Codhog/leetcode_javascript">https://github.com/Codhog/leetcode_javascript</a></p><ol><li><table><thead><tr><th>类型</th><th>题名</th><th align="left">题目窍门</th><th>R</th></tr></thead><tbody><tr><td>BFS</td><td>二维矩阵\</td><td align="left">保持一个FIFO的queue  在queue loop内第一句更新选中节点(第一个.shift)，</td><td>Y</td></tr><tr><td></td><td>/最短路径</td><td align="left">步骤 1. 在queue内循环到空 2. 确定</td><td></td></tr><tr><td></td><td></td><td align="left"></td><td></td></tr><tr><td>字符串</td><td>最长前缀</td><td align="left"></td><td></td></tr><tr><td></td><td></td><td align="left"></td><td></td></tr><tr><td></td><td></td><td align="left"></td><td></td></tr></tbody></table></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Leetcode in JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS and DFS</title>
      <link href="/2021/12/25/Breadth%20First%20Search%20and%20how%20to%20apply%20it%20in%20Javascript/"/>
      <url>/2021/12/25/Breadth%20First%20Search%20and%20how%20to%20apply%20it%20in%20Javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="Breadth-First-Search-and-how-to-apply-it-in-Javascript"><a href="#Breadth-First-Search-and-how-to-apply-it-in-Javascript" class="headerlink" title="Breadth First Search and how to apply it in Javascript"></a>Breadth First Search and how to apply it in Javascript</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>BFS focusing on exhausting all options at current level/depth, thus is good for maze.</p><p>DFS focusing on using recursion to reach to the end of options, track it and go back to origin and repeat.</p><p>BFS uses a queue while BFS uses a stack.  </p><p>So we can either use native JS <strong>array</strong> or write our own queue and stack</p><h2 id="2-Similar-Approach-of-BFS"><a href="#2-Similar-Approach-of-BFS" class="headerlink" title="2. Similar Approach of BFS"></a>2. Similar Approach of BFS</h2><p>The classic BFS approach for a binary tree is to use a <strong>queue</strong> and push each queue entry’s children onto the end of the queue. </p><p>This way, the queue will run to the end of the row/level before moving onto the next level.</p><p>The steps should be</p><ol><li> while loop for incrementing depth when inner loop end</li><li>Inner loop, looping through the current Node in queue.</li><li>We will Do FIFO and pop the first Node, and immediately add, verify potential feasible child Nodes to end</li><li>Marked the new visited Node as visited ( Usually use a new array to store, but you can do it in-place)</li><li>End the Inner Loop</li><li>Increment Depth</li></ol><p>Confused? I will explain the step 3 more before I show you the code.</p><h2 id="3-What-are-we-doing-in-step-3"><a href="#3-What-are-we-doing-in-step-3" class="headerlink" title="3.  What are we doing in step 3?"></a>3.  What are we doing in step 3?</h2><p>We are trying to go through every feasible options(Nodes),</p><p>by adding every possible options on to end of Array,</p><p>Starting with a root, and go to its children, and its grand children.</p><p>Pop the first one and then verified, so eventually no element can be in queue.</p><p>And we can store a “depth” variable to keep track the change of queue.</p><h2 id="4-Examples"><a href="#4-Examples" class="headerlink" title="4.Examples"></a>4.Examples</h2>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Leetcode in JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary search explain in Javascript</title>
      <link href="/2021/12/11/Binary%20Search/"/>
      <url>/2021/12/11/Binary%20Search/</url>
      
        <content type="html"><![CDATA[<h1 id="Binary-search-explain-in-Javascript"><a href="#Binary-search-explain-in-Javascript" class="headerlink" title="Binary search explain in Javascript"></a>Binary search explain in Javascript</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>It is also called, half interval search.  Usually done by placiong two pointers at start and end.  Cut in half the looking range, until locating the target.</p><h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p>Let’s say we have range of N, and it takes X times we can cut the range in half and get the Target.</p><blockquote><p>1 = N / 2^x</p></blockquote><p>multiply by 2x:</p><blockquote><p>2x = N</p></blockquote><p>now do the log2:</p><blockquote><p>log2(2x)   = log2 N<br>x * log2(2) = log2 N<br>x * 1     = log2 N</p></blockquote><p>this means you can divide log N times until you have everything divided. Which means you have to divide log N (“do the binary search step”) until you found your element.</p><h3 id="What-is-Two-Pointer-and-BInary-Search-What’s-the-relationship-between-them"><a href="#What-is-Two-Pointer-and-BInary-Search-What’s-the-relationship-between-them" class="headerlink" title="What is Two Pointer and BInary Search? What’s the relationship between them?"></a>What is Two Pointer and BInary Search? What’s the relationship between them?</h3><p>Simply put. Binary Serach is an algorithm.  Two Pointers is an approach to achieve it.</p><p>Besides solving BS, TP can be really good to determine if a loop exist in an array or linked-list,</p><p>Imagining a faster pointer (move 2 index each teration) and a slower pointer (move 1 index each teration).  </p><p>The faster pointer  can always catch up slower pointer if a loop exists.</p><h3 id="Leetcode-Example"><a href="#Leetcode-Example" class="headerlink" title="Leetcode Example"></a>Leetcode Example</h3><h4 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a>69. Sqrt(x)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mySqrt = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x===<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>    </span><br><span class="line">    <span class="keyword">let</span> [i, j] = [<span class="number">1</span>, x]</span><br><span class="line">    <span class="keyword">let</span> ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = (i+(j-i)/<span class="number">2</span>) &lt;&lt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mid&lt;=x/mid)&#123;</span><br><span class="line">            ans = mid</span><br><span class="line">            i = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j = mid -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="744-Find-Smallest-Letter-Greater-Than-Target"><a href="#744-Find-Smallest-Letter-Greater-Than-Target" class="headerlink" title="744. Find Smallest Letter Greater Than Target"></a>744. Find Smallest Letter Greater Than Target</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nextGreatestLetter = <span class="function"><span class="keyword">function</span> (<span class="params">letters, target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> [start, end, mid] = [<span class="number">0</span>, letters.length - <span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            mid = <span class="built_in">Math</span>.floor(start + (end - start) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (target &lt; letters[mid]) &#123;</span><br><span class="line">                  end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> letters[start % letters.length];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="153. Find Minimum in Rotated Sorted Array"></a>153. Find Minimum in Rotated Sorted Array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [i, j] = [<span class="number">0</span>,nums.length-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = i+ <span class="built_in">Math</span>.floor((j-i)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;nums[j])&#123;</span><br><span class="line">            i = mid+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j=mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[i]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Leetcode in JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async, Await and Promise</title>
      <link href="/2021/10/01/Async-Await-and-Promise/"/>
      <url>/2021/10/01/Async-Await-and-Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Async-Await-and-Promise-Notes"><a href="#Async-Await-and-Promise-Notes" class="headerlink" title="Async, Await and Promise Notes"></a>Async, Await and Promise Notes</h1><h4 id="Advantage-of-Async-over-Promise"><a href="#Advantage-of-Async-over-Promise" class="headerlink" title="Advantage of Async over Promise"></a>Advantage of Async over Promise</h4><p>They are both JavaScript’s unique way to achieve asynchronous programming,</p><p>while async/await(ES7) is introduced later than Promise(ES6),</p><p>because Promise was intended to eliminate the callback hell from ajax, </p><p>(callback hell =&gt; a ajax output requires a ajax input and chained together)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// chained ajax, very hard to read</span><br><span class="line">$.ajax1(&#123;</span><br><span class="line">success:$.ajax2(&#123;</span><br><span class="line">success: $.ajax4(&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">failure:$.ajax3()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> but promise also create a monster of its own chaining together a lots of “then()”, and is not clear on the error catching</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// chained promise, each then(), or catch(), finally() returns a promise, but easier to read than chained ajax</span><br><span class="line">myPromise</span><br><span class="line">.then(()=&gt;handleResolvedA())</span><br><span class="line">.then(()=&gt;handleResolvedB())</span><br><span class="line">.then(()=&gt;handleResolvedC())</span><br><span class="line">.catch(err =&gt; &#123; console.log(&quot;oops&quot;) &#125;);</span><br><span class="line">// output</span><br><span class="line">// Error: oops at myPromise.then.then.then.then.then (index.js:8:13)</span><br></pre></td></tr></table></figure><p>So the Async/await decorators was introduced later to offer easier way to do the same thing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">async function myPromise()&#123;</span><br><span class="line">let result;</span><br><span class="line">try&#123;</span><br><span class="line">result = await handleResolvedA()</span><br><span class="line">&#125;</span><br><span class="line">catch(err)&#123;</span><br><span class="line">console.log(&quot;oops&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// output</span><br><span class="line">// Error: oops at myPromise</span><br></pre></td></tr></table></figure><h4 id="To-Sum-Up"><a href="#To-Sum-Up" class="headerlink" title="To Sum Up"></a>To Sum Up</h4><p>Async syntactic sugar provide a nice, simplified alternate way to handle asynchronous request that is simpler to read and maintain, over using Promise.</p><p>Last but not least, you can even add async in front of class/object methods to make them return promises, and await promises inside them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">first, last, age, gender, interests</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.interests = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="built_in">this</span>.name.first&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">farewell</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name.first&#125;</span> has left the building. Bye for now!`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> han = <span class="keyword">new</span> Person(<span class="string">&#x27;Han&#x27;</span>, <span class="string">&#x27;Solo&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;male&#x27;</span>, [<span class="string">&#x27;Smuggling&#x27;</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Personal Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A beginners&#39; guide of implementing co-operative editing document using React and socket.io</title>
      <link href="/2021/10/01/Guide-to-socket-io/"/>
      <url>/2021/10/01/Guide-to-socket-io/</url>
      
        <content type="html"><![CDATA[<h1 id="A-beginners’-guide-of-implementing-co-operative-editing-document-using-React-and-socket-io"><a href="#A-beginners’-guide-of-implementing-co-operative-editing-document-using-React-and-socket-io" class="headerlink" title="A beginners’ guide of implementing co-operative editing document using React and socket.io"></a>A beginners’ guide of implementing co-operative editing document using React and socket.io</h1><h4 id="1-Tech-Stack"><a href="#1-Tech-Stack" class="headerlink" title="1. Tech-Stack:"></a>1. Tech-Stack:</h4><ul><li>React (create-react-app)</li><li>Koa </li><li>Socket.io</li><li>nodemon for HMR on server side (optional)</li></ul><p>(You need Node and npm/yarn installed, as well as some basic webpack knowledge)</p><h4 id="2-Abstraction"><a href="#2-Abstraction" class="headerlink" title="2. Abstraction"></a>2. Abstraction</h4><p>This App is a simple implementation of co-operative editing document meant for demonstrating how client-ui can work with server through a constant connection called websocket.</p><p>The client-UI is based of Flavio Copes(<a href="https://flaviocopes.com/">https://flaviocopes.com/</a>) React Excel tutorial,</p><p><a href="https://flaviocopes.com/tutorial-react-spreadsheet/">https://flaviocopes.com/tutorial-react-spreadsheet/</a></p><p>while this guide emphasize on how socket.io works to establish constant connection</p><p>between multiple clients and server.</p><h4 id="3-Folders-Structure"><a href="#3-Folders-Structure" class="headerlink" title="3. Folders Structure"></a>3. Folders Structure</h4><p>**Client Side **(react create-react-app) Client’s name folder</p><p>​    src</p><p>​        Table</p><p>​            -&gt; Table.js</p><p>​        Cell</p><p>​            -&gt; Cell.js</p><p>​        Row</p><p>​            -&gt; Row.js</p><p>​    App.js</p><p>​    index.js</p><p><strong>Server Side</strong> (Koa2) Server(API) name folder</p><p>server.js</p><h4 id="4-The-Client-side-gt-To-sum-up-defining-what-happen-next-in-each-event’s-callback"><a href="#4-The-Client-side-gt-To-sum-up-defining-what-happen-next-in-each-event’s-callback" class="headerlink" title="4. The Client side =&gt; To sum up:  defining what happen next in each event’s callback"></a>4. The Client side =&gt; To sum up:  defining what happen next in each event’s callback</h4><p>The code before Introducing Formula is an Excel table with editing function without Math(all the code above Introducing Formula), and we will try to make it <strong>real-time</strong> like Google Docs. When it’s done, your code should be similar to <a href="https://flaviocopes.com/tutorial-react-spreadsheet/">https://flaviocopes.com/tutorial-react-spreadsheet/</a> Before <strong>Introducing Formula</strong>. </p><p>In order to make real-time co-operative edit work, we need to add some events in componentDidMount .</p><p>We will add these events:</p><ul><li>sheet’s Content changing  </li><li>sheet editing (start and stop)</li></ul><ol><li>Content Changed Event</li></ol><p>When the change of table’s content is changed we will emit an event to notify the server, and the other client.</p><p>We define the function sendMessage anywhere below the “sonstructor” method and above the render() in Table.js</p><p>and call “sendMessage”  in “handleChangedCell” as this function handle the total table data and apply to each cell.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">handleChangedCell = <span class="function">(<span class="params">&#123; x, y &#125;, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> modifiedData = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.state.data);</span><br><span class="line">  <span class="keyword">if</span> (!modifiedData[y]) modifiedData[y] = &#123;&#125;;</span><br><span class="line">  modifiedData[y][x] = value;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">data</span>: modifiedData &#125;);</span><br><span class="line">  <span class="built_in">this</span>.sendMessage(modifiedData, <span class="built_in">this</span>.props.displayName)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sendMessage = <span class="function">(<span class="params">sdata, sendername</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.emit(<span class="string">&quot;skchange&quot;</span>, &#123; </span><br><span class="line">    <span class="attr">data</span>: sdata,</span><br><span class="line">    <span class="attr">sender</span>: sendername</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>By doing this we send the table data along with sender’s name to backend, and backend will respond and transmit a new singal(‘sknew’).</p><h3 id="socket-broadcast-emit"><a href="#socket-broadcast-emit" class="headerlink" title="socket.broadcast.emit"></a>socket.broadcast.emit</h3><p>“socket.broadcast.emit() “ can also send the data to everyone except the sender.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&#x27;skchange&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ws表格变动&#x27;</span>, data);</span><br><span class="line">    io.emit(<span class="string">&#x27;sknew&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>which is the same as</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// users &#123;:Map username =&gt; id&#125;    </span></span><br><span class="line">socket.on(<span class="string">&#x27;skchange&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> ([username, id] <span class="keyword">of</span> users.entries()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (username !== data.sender) &#123;</span><br><span class="line">                io.to(id).emit(<span class="string">&#x27;sknew&#x27;</span>, data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>The Table.js has a state “data” which is essentially the data of each column and row stored in one object.</p><p>When one client changed data, we want another client to have the same data.</p><p>So we just Transmit the whole data, through server and to another client.</p><p> <strong>Tips!</strong>:we will do this in componentDidmount()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  socket.on(&quot;sknew&quot;, (sdata) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;sknew接收&#x27;,sdata);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      data: sdata.data,</span><br><span class="line">      sender: sdata.sender</span><br><span class="line">    &#125;)</span><br><span class="line">    this.forceUpdate()</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>with the server code (shown above)</p><p>we shall have the app working like this</p><p><img src="/.io//2.gif" alt="1"></p><p>Now we have the real-time text, let’s make others know who is editing.</p><p><img src="/.io//3.gif" alt="3"></p><p>To do that, we need to send out socket signals of “Start Editing” and “End Editing” at “double-clicked” “onBlur” respectively.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">doubleClicked = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Prevent click and double click to conflict</span></span><br><span class="line">  <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">  <span class="built_in">this</span>.prevent = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">this</span>.emitUnselectAllEvent();</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">editing</span>: <span class="literal">true</span>, <span class="attr">selected</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="comment">// Unselect all the otfher cells and set the current</span></span><br><span class="line">  <span class="comment">// Cell state to `selected` &amp; `editing`</span></span><br><span class="line">  <span class="comment">// 双击格子后 发送信号</span></span><br><span class="line">  socket.emit(<span class="string">&#x27;skediting&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;dataName&#x27;</span>: <span class="built_in">this</span>.props.displayName,</span><br><span class="line">    <span class="string">&#x27;dataCoor&#x27;</span>: [<span class="built_in">this</span>.props.x, <span class="built_in">this</span>.props.y]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Above is how we send the  “Start Editing”, and we need to code the receiving signal for this.</p><p>Since we want this to happen after the DOM is mounted, we code the behavior on receiving events in componentDidmount()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">socket.on(&#x27;skeditcoming&#x27;, (data) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;接受修改信号&#x27;, data);</span><br><span class="line">  // 取消其他选中框</span><br><span class="line">  this.emitUnselectAllEvent();</span><br><span class="line">  this.setState(&#123;</span><br><span class="line">    typingName: data.dataName,</span><br><span class="line">    currentXy: [...data.dataCoor],</span><br><span class="line">    editing: true</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>we transfer the data including: the guy’s name who is editing, which cell is editing, and the state for editing.</p><p>After we finished the “Start Editing” signal, let’s get to the “End Editing”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onBlur = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.emit(<span class="string">&#x27;editend&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;xycoor&#x27;</span>: [<span class="built_in">this</span>.props.x, <span class="built_in">this</span>.props.y],</span><br><span class="line">    <span class="string">&#x27;newValue&#x27;</span>: e.target.value</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.hasNewValue(e.target.value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And the receiving part.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&#x27;editendcoming&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data, <span class="string">&#x27;editendcoming+_+_+&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.props.onChangedValue(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">x</span>: data.xycoor[<span class="number">0</span>],</span><br><span class="line">      <span class="attr">y</span>: data.xycoor[<span class="number">1</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    data.newValue</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="attr">typingName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">currentXy</span>: [],</span><br><span class="line">    <span class="comment">// value:data.newValue,</span></span><br><span class="line">    <span class="attr">editing</span>: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>SUM UP</strong>:  Every event we register will have two different names come back and forth,</p><p>If we emit “newmessage” to server, after server received it, it need another name to send to client “newMessageComing”</p><p><img src="/.io//4.png"></p><h4 id="5-Transmitting-data-through-Socket-io"><a href="#5-Transmitting-data-through-Socket-io" class="headerlink" title="5. Transmitting data through Socket.io"></a>5. Transmitting data through Socket.io</h4><p>The server side is simplified to demonstrate how socket.io works with http server and client-UI with no touch on database.</p><p>First, we create the instance of websocket using Koa.  </p><p>Note that Koa requires app.callback() as parameter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).createServer(app.callback())</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server)</span><br></pre></td></tr></table></figure><p> which is unlike express</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;).Server(app);</span><br><span class="line">var io = require(&#x27;socket.io&#x27;)(http);</span><br></pre></td></tr></table></figure><p>Next, in my implementation I used a map collection to record the current logged in users.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ws on connect&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    socket.on(<span class="string">&#x27;getID&#x27;</span>, <span class="function"><span class="params">name</span>=&gt;</span>&#123;</span><br><span class="line">        users.set(name, socket.id) </span><br><span class="line">        <span class="built_in">console</span>.log(users, <span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>I personally chose a customized signal to record each user’s information (username, socketId, etc..)</p><p>In client side, where login event will trigger this function.  Emitting the “getID” signal while server-side store and handle the users’ information.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleLogin = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  socket.emit(<span class="string">&quot;getID&quot;</span>, <span class="built_in">this</span>.username.current.value);</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="attr">displayTable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Some controversies here:</strong></p><p>The other way around is transmitting information in the callback function of on(“connect”),</p><p>which means transmitting data over the first/short TCP “touching base” request, seems unstable?  But it’s doable and is in the official docs.</p><p>But I found it unstable with the <strong>sequence</strong> of setting other state in client side or with other ajax action which required the use of Async decorator to achieve desired code firing order.</p><p>Let’s also set a customized disconnect event for client, so the global users map object can now update according to users’ login/logout action with unique socketID.</p><p>users map delete the socketID of disconnected users using map.prototype.delete(), easy right?</p><p>Put this block of code inside the scope of  io.on(‘connection’){} as this is a customized event.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;socket disconnected&#x27;</span>, socket.id);</span><br><span class="line">  <span class="keyword">for</span> ([username, id] <span class="keyword">of</span> users.entries())&#123;</span><br><span class="line">      <span class="keyword">if</span>(id === socket.id)&#123;</span><br><span class="line">          users.delete(username)</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;map after disconnected&#x27;</span>, users);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong></p><p>In fact, all of the customized events need to be put in the scope of </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(&quot;connection&quot;, (socket)=&gt;&#123;</span><br><span class="line">  // put all customized events here</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>Adding the events of cooperative document will use,</p><ul><li> sheet changing </li><li> sheet editing </li></ul><p>The sheet can be now edited while another client knowing it.</p><p>Here is what “server/server.js” file will look like</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">//const config = require(&#x27;./db&#x27;) omitting the database</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).createServer(app.callback())</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> users = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ws连接了&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    socket.on(<span class="string">&#x27;getID&#x27;</span>, <span class="function"><span class="params">name</span>=&gt;</span>&#123;</span><br><span class="line">        users.set(name, socket.id) </span><br><span class="line">        <span class="built_in">console</span>.log(users, <span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里定义socket io 实例 收到 自定义的消息时做出什么行为</span></span><br><span class="line">    socket.on(<span class="string">&#x27;skchange&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ws表格变动&#x27;</span>, data);</span><br><span class="line">        <span class="keyword">for</span> ([username, id] <span class="keyword">of</span> users.entries())&#123;</span><br><span class="line">            <span class="keyword">if</span>(username!==data.sender)&#123;</span><br><span class="line">                io.to(id).emit(<span class="string">&#x27;sknew&#x27;</span>, data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ws发出&#x27;</span>);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">&#x27;skediting&#x27;</span>, <span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(user, <span class="string">&#x27;开始编辑&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> ([username, id] <span class="keyword">of</span> users.entries())&#123;</span><br><span class="line">            <span class="keyword">if</span>(username!==user)&#123;</span><br><span class="line">                io.to(id).emit(<span class="string">&#x27;skeditcoming&#x27;</span>, user)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 断开后根据id值删除键和值</span></span><br><span class="line">      socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;socket断开了&#x27;</span>, socket.id);</span><br><span class="line">        <span class="keyword">for</span> ([username, id] <span class="keyword">of</span> users.entries())&#123;</span><br><span class="line">            <span class="keyword">if</span>(id === socket.id)&#123;</span><br><span class="line">                users.delete(username)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;断开后map&#x27;</span>, users);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;http:localhost:8080&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-References"><a href="#6-References" class="headerlink" title="6. References"></a>6. References</h4><p>The react-sheet-ui with no websocket enhanced is based off Flavio Copes(<a href="https://flaviocopes.com/">https://flaviocopes.com/</a>) React Excel tutorial.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> React.js </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JS对象键值隐性转换导致的复合数组求长度出现的问题</title>
      <link href="/2021/05/02/%E5%85%B3%E4%BA%8EJS%E5%AF%B9%E8%B1%A1%E9%94%AE%E5%80%BC%E9%9A%90%E6%80%A7%E8%BD%AC%E6%8D%A2%E5%AF%BC%E8%87%B4%E7%9A%84%E5%A4%8D%E5%90%88%E6%95%B0%E7%BB%84%E6%B1%82%E9%95%BF%E5%BA%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/05/02/%E5%85%B3%E4%BA%8EJS%E5%AF%B9%E8%B1%A1%E9%94%AE%E5%80%BC%E9%9A%90%E6%80%A7%E8%BD%AC%E6%8D%A2%E5%AF%BC%E8%87%B4%E7%9A%84%E5%A4%8D%E5%90%88%E6%95%B0%E7%BB%84%E6%B1%82%E9%95%BF%E5%BA%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JS对象键值的隐性转换"><a href="#JS对象键值的隐性转换" class="headerlink" title="JS对象键值的隐性转换"></a>JS对象键值的隐性转换</h1><blockquote><p><strong>今天在求一种类似[{string:bool},{string:bool}]的数组长度时， 直接用Array.length没有用。</strong></p><p><strong>在外网上看到有解释，希望能对大家有用</strong></p><p><strong>问题是这样的</strong></p><p><strong>在往这个数组添加新元素的时候，我用的是 list[‘string’] = bool, 而不是 list.push({‘string’:bool})</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210324173038800.JPG#pic_center" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上图的结果分别是这些东西  我们可以看到 这个object array 虽然看着里面有对象  但是长度却是0</span></span><br><span class="line"><span class="built_in">console</span>.log(array,array.length,<span class="built_in">Object</span>.prototype.apply(array))</span><br></pre></td></tr></table></figure><p>我们把问题复现：<br>分别尝试以取键赋值 和 数组push的方法分别实现 一个字典包对象<br>我们能看到 这两种方法不只是长度不一样 结果也是不一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line">a[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">&#x27;b&#x27;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = []</span><br><span class="line">b.push(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">b.push(&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.length, b.length); <span class="comment">//0, 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">//[ a: 1, b: 2 ], [ &#123; a: 1 &#125;, &#123; b: 2 &#125; ]</span></span><br></pre></td></tr></table></figure><p>可能这个例子不够清晰：再举一个 让大家明白JS作为弱语言发生的隐性转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line">a[<span class="string">&#x27;1&#x27;</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">&#x27;2&#x27;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = []</span><br><span class="line">b.push(&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">b.push(&#123;<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.length, b.length); <span class="comment">// 3 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// [ &lt;1 empty item&gt;, 1, 2 ] [ &#123; &#x27;1&#x27;: 1 &#125;, &#123; &#x27;2&#x27;: 2 &#125; ]</span></span><br></pre></td></tr></table></figure><p>JS会隐性地在读取对象地时候将对象地字符串 键 转换为js理解的类型</p><p>所以说</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="string">&#x27;1&#x27;</span>] 实际上等价于 a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>所以说以 1 为键时 即时取得时候是字符串形式，JS也会自动补全a[0]为empty</p><p>所以说也能解释如果是a【‘a’】的形式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = []</span><br><span class="line">a[&#x27;a&#x27;] = 1</span><br><span class="line">a[&#x27;b&#x27;] = 2</span><br></pre></td></tr></table></figure><p>外网的解释是</p><p>JS将’a’隐性转换成了对象a，所以只是给a的a属性添加了值，而并没有增加数组的实际长度</p><p>如果想遍历这个含有对象地数组 或者看里面的长度 最好还是用类数组的遍历方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(a) <span class="comment">//或者</span></span><br><span class="line"><span class="built_in">Object</span>.entries(a) <span class="comment">//不是很好用 因为如果数组是对象 会出现每个索引为键  而值才是你要的每个字典 所以要再进行一次遍历</span></span><br><span class="line"><span class="comment">//推荐用keys 再从数组中取</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>英文好的可以看看<a href="https://stackoverflow.com/questions/2528680/javascript-array-length-incorrect-on-array-of-objects">https://stackoverflow.com/questions/2528680/javascript-array-length-incorrect-on-array-of-objects</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> my CSDN blog </tag>
            
            <tag> disscussion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于css animation 需要重置(重复启动)的情况</title>
      <link href="/2021/04/22/%E5%85%B3%E4%BA%8Ecss%20animation%20%E9%9C%80%E8%A6%81%E9%87%8D%E7%BD%AE(%E9%87%8D%E5%A4%8D%E5%90%AF%E5%8A%A8)%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/2021/04/22/%E5%85%B3%E4%BA%8Ecss%20animation%20%E9%9C%80%E8%A6%81%E9%87%8D%E7%BD%AE(%E9%87%8D%E5%A4%8D%E5%90%AF%E5%8A%A8)%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="关于css-animation-需要重置-重复启动-的情况"><a href="#关于css-animation-需要重置-重复启动-的情况" class="headerlink" title="关于css animation 需要重置(重复启动)的情况"></a>关于css animation 需要重置(重复启动)的情况</h1><p>CSS animation基础设置就是只跑一次，如果需要一个特点的结束状态（比如说结束后在新的xy位置 或者大小变化后不还原），那需要用的是transition 这篇文章不讨论这个但建议理解一下animation 和transition之间的区别。</p><p>因为CSS animation的基础设置就是只跑一次，通过触发事件添加animation类到元素上的方法（有点绕，请看第一段代码），会导致只有第一次添加类触发该 animation但是后期的反复操作会无效，要注意的是 在这个情况下 这个animation类 (transform-active) 自从第一次被添加后 始终在这个元素内 即使动画结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    $(<span class="string">&quot;#fullscreen-button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).addClass(<span class="string">&#x27;position-animatable&#x27;</span>)</span><br><span class="line">               </span><br><span class="line">        $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).addClass(<span class="string">&#x27;transform-active&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>($(<span class="string">&#x27;#fullscreen-button&#x27;</span>).hasClass(<span class="string">&#x27;new-position&#x27;</span>))&#123;</span><br><span class="line">            $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).removeClass(<span class="string">&#x27;new-position&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).addClass(<span class="string">&#x27;new-position&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);  </span><br><span class="line"><span class="comment">// 这是基本考虑下写的代码</span></span><br></pre></td></tr></table></figure><p>于是我首先想到的是在点击事件中添加removeClass，将该animation类在点击事件函数中执行后移除，下次执行不就没有了么，但这样是不行的，jquery不会按行判断，而是直接把这两个抵消掉。(在stackoverflow上听别人说的..)</p><p>然后我又看到  据说 通过修改元素的 <strong>样式</strong>会导致渲染树重新渲染(repaint) 那样animation类 (transform-active) 就会被重置，还有一个办法是给removeClass加上settimeout 时间设置为0也会导致重绘。</p><p>我试了一下 都不行..</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#fullscreen-button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).addClass(<span class="string">&#x27;position-animatable&#x27;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).removeClass(<span class="string">&#x27;transform-active&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">700</span>)</span><br><span class="line">    $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).addClass(<span class="string">&#x27;transform-active&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&#x27;#fullscreen-button&#x27;</span>).hasClass(<span class="string">&#x27;new-position&#x27;</span>))&#123;</span><br><span class="line">        $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).removeClass(<span class="string">&#x27;new-position&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#fullscreen-button&#x27;</span>).addClass(<span class="string">&#x27;new-position&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后我还是老实的给setTimeout 加上个时间，成了， 就是效果不对劲， 把延迟时间改成animation-duration的时间， 效果符合预期。</p><p>这是篇好文 <a href="https://blog.csdn.net/culi4814/article/details/108377840">https://blog.csdn.net/culi4814/article/details/108377840</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> my CSDN blog </tag>
            
            <tag> disscussion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件流，冒泡，捕获流程，事件委托，以及高兼容的跨浏览器事件处理</title>
      <link href="/2021/04/03/JS%E4%BA%8B%E4%BB%B6%E6%B5%81%EF%BC%8C%E5%86%92%E6%B3%A1%EF%BC%8C%E6%8D%95%E8%8E%B7%E6%B5%81%E7%A8%8B%EF%BC%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%AB%98%E5%85%BC%E5%AE%B9%E7%9A%84%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
      <url>/2021/04/03/JS%E4%BA%8B%E4%BB%B6%E6%B5%81%EF%BC%8C%E5%86%92%E6%B3%A1%EF%BC%8C%E6%8D%95%E8%8E%B7%E6%B5%81%E7%A8%8B%EF%BC%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%AB%98%E5%85%BC%E5%AE%B9%E7%9A%84%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="JS事件流，冒泡，捕获流程，事件委托，以及高兼容的跨浏览器事件处理"><a href="#JS事件流，冒泡，捕获流程，事件委托，以及高兼容的跨浏览器事件处理" class="headerlink" title="JS事件流，冒泡，捕获流程，事件委托，以及高兼容的跨浏览器事件处理"></a>JS事件流，冒泡，捕获流程，事件委托，以及高兼容的跨浏览器事件处理</h1><p>先说结论：选择捕获或冒泡完全取决于你想要的元素事件启动顺序。</p><h3 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h3><p>JS是事件驱动的(Event-oriented)语言，DOM规范提供了点击(onclick)，加载(onload)，鼠标悬停(onmouseover)</p><p>DOM2 Events 规范规定事件流分为3 个阶段：<strong>事件捕获、到达目标和事件冒泡</strong>。</p><p>这是怎么回事呢，因为微软IE和Netscape的大佬在开发浏览器的时候分别开会，认为表单(事件)处理可以从服务器放到浏览器上，确认元素的具体层级，肯定要层层定位，这个分别开会后诞生了很有意义的结果，虽然思路是相似的，可结果却有点相反。IE觉得要从子元素找到父元素（事件冒泡），而Netscape则相信从父元素找到子元素(事件捕获)。</p><p>W3C规范则认为两个功能都要被浏览器提供给开发者</p><p><img src="https://img-blog.csdnimg.cn/20210326172703317.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haW1hZGRhZGFv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>根据DOM2 Events 规范规定，捕获阶段是不会提取到div元素的，而此规范也认为<strong>到达目标</strong>和<strong>事件冒泡</strong>是同一阶段。</p><p>但现实是，现代浏览器会提供多种方案让我们在捕获阶段获取元素</p><p>IE10及以下不能在捕获阶段提取元素，IE11、Chrome 、Firefox、Safari等浏览器则可在两个阶段获取元素</p><h3 id="DOM0事件处理"><a href="#DOM0事件处理" class="headerlink" title="DOM0事件处理"></a>DOM0事件处理</h3><p>内联模式：它的js和html不分离、耦合性高、维护困难所以不推荐使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> <span class="attr">onlcick</span>=<span class="string">&quot;alert(&#x27;click on btn.&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>普通传统模式：被最多浏览器支持的方法 包括DOM2，</p><p>下图表示通过DOM0绑定一个元素，和解除绑定</p><p>值得注意的是此时btn.this作用于指向的是Event.target，与IE的<strong>attachEvent(</strong>)<strong>相反</strong>，IE的this指向window</p><p>DOM0的事件处理程序会在元素的作用域中运行，而attachEvent()为全局作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.id); <span class="comment">// &quot;myBtn&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 移除事件处理操作</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>可是DOM0只能对一个元素绑定一个事件处理程序，且只能<strong>事件冒泡</strong>型选元素，也就引开了下一个话题</p><h3 id="DOM2事件处理"><a href="#DOM2事件处理" class="headerlink" title="DOM2事件处理"></a>DOM2事件处理</h3><p>DOM2相比DOM多了addEventListener()和removeEventListener(), 它们接收3 个参数：事件名、事件处理函<br>数和一个布尔值，true在捕获阶段调用事件处理程序，false在冒泡阶段调用事件处理程序</p><p>addEventListener()最大的优势就是可以为同一个事件添加多个事件处理程序</p><p>大多数情况下，事件处理程序会被添加到事件流的冒泡阶段，主要原因是跨浏览器兼容性好</p><p>要注意的是 addEventListener()中的匿名函数不能被移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn.removeEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 无法移除</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>匿名函数导致传给removeEventListener()的事件处理函数必须与传给addEventListener()<br>的不是同一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn.removeEventListener(<span class="string">&quot;click&quot;</span>, handler, <span class="literal">false</span>); <span class="comment">// 移除成功</span></span><br></pre></td></tr></table></figure><h3 id="跨浏览器事件处理"><a href="#跨浏览器事件处理" class="headerlink" title="跨浏览器事件处理"></a>跨浏览器事件处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    <span class="attr">addHandler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">removeHandler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">            element.detachEvent(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先检测是否存在DOM2 方式。如果有DOM2 方式，就使用该方式，传入事件类型和事件处理函数，以及表示冒泡阶段的第三个参数false。否则，如果存在IE 方式，则使用该方式。注意这时候必须在事件类型前加上”on”，才能保证在IE8 及更早版本中有效</p><p>要确保事件处理代码具有最大兼容性，只需要让代码在<strong>冒泡阶段</strong>运行即可。</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托 - 是一种神奇的方法，我们不需要监听任何子元素，而是监听一个父元素的所有子元素是否发生我们指定的事件。</p><p>这样可以解决经常被替换的元素无法被绑定事件，比如表格中的button需要删除和添加，但他们本质的点击事件都是一样的。</p><p>或者说是父元素生成后，子元素还未生成，却要给未来生成的子元素绑定事件，这些情况就需要事件委托。</p><p>JQuery中的delegate 就能很好的解决这类情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).delegate(<span class="string">&quot;button&quot;</span>,<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;parent-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-1&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-2&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-3&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-4&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-5&quot;</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-6&quot;</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 选中父元素并监听包括父元素和其中的所有点击事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;parent-list&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// e.target 就是被点击的事件</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 检查是否为li元素</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(e.target &amp;&amp; e.target.nodeName == <span class="string">&quot;LI&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 成功的监听到了父元素内的所有子元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;List item &quot;</span>, e.target.id.replace(<span class="string">&quot;post-&quot;</span>), <span class="string">&quot; was clicked!&quot;</span>);</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果说我们不用事件委托，为每个子元素单独绑定事件函数，那么内存就会被大幅使用，因为每个绑定事件都需要事件解除，而DOM0级的事件是无法被消除掉的。</p><p>事件委托利用了事件冒泡的机制，因此也只能发生在事件冒泡阶段</p><p>注意：如果父元素离子元素太远了（其中有过多嵌套）事件冒泡会经过大量的父元素导致占用大量内存</p>]]></content>
      
      
      
        <tags>
            
            <tag> my CSDN blog </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 部署 Django Python虚拟环境创建 傻瓜教程</title>
      <link href="/2021/03/21/Nginx%20%E9%83%A8%E7%BD%B2%20Django%20Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA%20%E5%82%BB%E7%93%9C%E6%95%99%E7%A8%8B/"/>
      <url>/2021/03/21/Nginx%20%E9%83%A8%E7%BD%B2%20Django%20Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA%20%E5%82%BB%E7%93%9C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>这里不讨论uwsgi 与 nginx之间的关系，但是建议学习</p><p>通俗说，Nginx就是可以让你的网页支持更多请求时保证负载均衡，</p><p>简单的网页用uwsgi部署配合django runserver也可以达到要求，所以从负载能力是</p><p><strong>Nginx &gt; uwsgi &gt; 本地 django runserver</strong></p><p>（你的服务器需要先安装好Python 和 pip 和 nginx 和 开启环境后安装uwsgi）- 这个步骤先于第一条</p><p>项目进入部署状态 ALLOWED_HOST = [‘*’] </p><p>DEBUG=False 之类的</p><h2 id="1-首先你需要在服务器配置虚拟环境-virtualenv"><a href="#1-首先你需要在服务器配置虚拟环境-virtualenv" class="headerlink" title="1. 首先你需要在服务器配置虚拟环境 virtualenv"></a>1. 首先你需要在服务器配置虚拟环境 virtualenv</h2><p>注意(只有<strong>python</strong>2.7及更高版本才支持virtualenv)</p><p>如果是Python 2</p><p>导航到你的项目文件夹后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p /path/to/new/virtual/environment venv</span><br></pre></td></tr></table></figure><p>如果是Python 3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv /path/to/new/virtual/environment</span><br></pre></td></tr></table></figure><p>运行这个指令会建造一个新文件夹 environment</p><p>并且该虚拟环境被取名为 venv</p><p>被创建的这个新文件夹里面会有三个文件夹，其中bin是以后我们启动虚拟环境的起点目录</p><p>如果需要删除该虚拟环境，直接<strong>删除该虚拟环境</strong>的根目录就行</p><p>如下： 使用source 指令开启 使用deactivate [venv名字] 关闭  如果要关闭初始[base]环境 使用conda deactivate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /path/to/new/virtual/environment/bin/activate</span><br></pre></td></tr></table></figure><p>注意 一定要记得给虚拟环境安装uwsgi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>接下来 同样重要的是给虚拟环境安装 配置文件 (就是pycharm里面虚拟环境安装的给你项目用的东西)</p><p>cd 到<strong>本地</strong>项目文件夹 或者 pycharm terminal里面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>如果有问题 (我出现了 -ip 24 的包出现的问题 百度上搜索 删除即可) 你需要对每一个出现问题的包进行查询</p><p>然后检查requirements.txt的格式</p><p>大概是这样  包==版本号 必须严格相同 pip freezelist 那个不行 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">asgi-redis==1.4.3</span><br><span class="line">asgiref==3.3.4</span><br><span class="line">asttokens==2.0.4</span><br><span class="line">async-timeout==2.0.1</span><br></pre></td></tr></table></figure><p>然后 scp -r 上传本地项目 至 服务器</p><p>然后在服务器上  启动虚拟环境 检查pip版本 python 版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /path/to/new/virtual/environment/bin/activate</span><br></pre></td></tr></table></figure><p>然后 安装依赖  (这个步骤可能会有坑 主要都是网域问题 所以Pycharm用的时候不能偷懒 必须一个项目一个环境</p><p>不然太多包总有网域不支持的包版本  尝试对出问题的包单独使用镜像 设置http为safe source等</p><p>csdn上别人写的太详细了我不好意思抄)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>如果出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;SSLError(SSLError(1, &#x27;[SSL: UNKNOWN_PROTOCOL] unknown protocol </span><br></pre></td></tr></table></figure><p>是因为pip version==20.3.3(最新版本)已经完全使用SSL认证, 如果服务器是http, 考虑降级pip至20.2.2</p><h2 id="2-配置uwsgi-ini"><a href="#2-配置uwsgi-ini" class="headerlink" title="2. 配置uwsgi.ini"></a>2. 配置uwsgi.ini</h2><p>在django项目的根目录下 (与manage.py同级目录)</p><p>测试下uwsgi连接</p><p>先建立个py测试文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /path/to/django/project/test.py  </span><br><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&#x27;200 OK&#x27;, [(&#x27;Content-Type&#x27;,&#x27;text/html&#x27;)])</span><br><span class="line">    return [b&quot;Hello World&quot;]</span><br></pre></td></tr></table></figure><p>cd到 /path/to/django/project/ 命令行中输入以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8001 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>浏览器输入你服务器网址加上端口8001 如果在页面上看到 Hello World 说明uwsgi配置成功</p><p>如果提示Internal Server Error</p><ol><li>检查uwsgi的版本 看是否安装到了虚拟环境中</li><li>检查test.py是否运行的是正确的那一个</li></ol><p>接下来正式配置Django项目的uwsgi.ini 文件, 启动这个文件要修改一些之前的命令 因为用的入口是module</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><p>新建uwsgi.ini文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line">socket = 127.0.0.1:6667</span><br><span class="line">chdir = /path/to/django/project/[你的django项目名]</span><br><span class="line">module = [你的django项目名].wsgi</span><br><span class="line">master = true         </span><br><span class="line">processes = 10</span><br><span class="line">threads = 2</span><br><span class="line">max-requests = 2000</span><br><span class="line">chmod-socket = 664</span><br><span class="line">pidfile= /path/to/django/project/[你的django项目名]/[你的django项目名].pid</span><br><span class="line">vacuum = true</span><br><span class="line">py-autoreload = 1</span><br><span class="line">daemonize = /path/to/django/project/[你的django项目名]/log/uwsgi.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用选项：</p><p>http ： 协议类型和端口号</p><p>processes ： 开启的进程数量</p><p>workers ： 开启的进程数量，等同于processes（官网的说法是spawn the specified number ofworkers / processes）</p><p>chdir ： 指定运行目录（chdir to specified directory before apps loading）</p><p>wsgi-file ： 载入wsgi-file（load .wsgi file）</p><p>stats ： 在指定的地址上，开启状态服务（enable the stats server on the specified address）</p><p>threads ： 运行线程。由于GIL的存在，我觉得这个真心没啥用。（run each worker in prethreaded mode with the specified number of threads）</p><p>master ： 允许主进程存在（enable master process）</p><p>daemonize ： 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。 (<strong>需要自己手动建立log文件夹)</strong> 否则报错</p><p>pidfile ： 指定pid文件的位置，记录主进程的pid号。</p><p>vacuum ： 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><h2 id="3-创建nginx-conf配置文件"><a href="#3-创建nginx-conf配置文件" class="headerlink" title="3.创建nginx.conf配置文件"></a>3.创建nginx.conf配置文件</h2><p>同样是在django项目的根目录下 (与manage.py同级目录)</p><p>这是我的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /usr/local/nginx/conf/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">10110</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="attribute">charset</span>     utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>      /path/to/django/project/[你的django项目名]/log/nginx_access.log;</span><br><span class="line">        <span class="attribute">error_log</span>       /path/to/django/project/[你的django项目名]/log/nginx_error.log;</span><br><span class="line">        <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">16k</span>;     <span class="comment"># 读取大型客户端请求头的缓冲区的最大数量和大小</span></span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">10000m</span>;             <span class="comment">#设置nginx能处理的最大请求主体大小。</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;          <span class="comment">#请求主体的缓冲区大小。</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">        <span class="attribute">proxy_buffers</span>   <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">        <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /static &#123;</span><br><span class="line">                <span class="attribute">alias</span> /path/to/django/project/[你的django项目名]/static; <span class="comment"># 新静态文件收集地址</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">uwsgi_send_timeout</span> <span class="number">600</span>;        <span class="comment"># 指定向uWSGI传送请求的超时时间，完成握手后向uWSGI传送请求的超时时间。</span></span><br><span class="line">                <span class="attribute">uwsgi_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">                <span class="attribute">uwsgi_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">                <span class="attribute">include</span>     /usr/local/nginx/conf/uwsgi_params;</span><br><span class="line">                <span class="attribute">uwsgi_pass</span>  <span class="number">127.0.0.1:8208</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单一点</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">88</span>;　　　　　　　　　　　　　　　 <span class="comment"># 区别于uwsgi设置的端口</span></span><br><span class="line"><span class="attribute">server_name</span> www.wcwnina.com;　　　　　<span class="comment"># 记得在系统的/etc/hosts文件中添加IP与域名的映射！</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">include</span> uwsgi_params;　　　　　　　<span class="comment"># 与nginx.conf同目录</span></span><br><span class="line">    <span class="attribute">uwsgi_pass</span> <span class="number">192.168.1.2:8000</span>;　　 <span class="comment"># 与uwsgi配置中的socket一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">alias</span> /path/to/django/project/[你的django项目名]/static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建(修改)好后 重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="4-收集静态文件"><a href="#4-收集静态文件" class="headerlink" title="4. 收集静态文件"></a>4. 收集静态文件</h2><p>同样是在django项目的根目录下 (与manage.py同级目录)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h2 id="5-再次运行uwsgi"><a href="#5-再次运行uwsgi" class="headerlink" title="5. 再次运行uwsgi"></a>5. 再次运行uwsgi</h2><p>同样是在django项目的根目录下 (与manage.py同级目录)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><p>如果碰到了问题，需要到项目目录的log文件夹里查看nginx_error.log</p><p>可以用 以下 看最后10行 和 新增的信息 然后根据 具体问题 具体百度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f nginx_error.log</span><br></pre></td></tr></table></figure><p>本文对pip 安装 requirements 以及安装其他包 会碰到的问题省略了 </p><p>可以从 python nginx pip 版本   网域代理 pip代理 方面下手 (再难的我也不会了…)</p><p>希望 你的过程能一帆风顺 否则 具体问题 具体百度</p><p>如果遇到问题需要重启 查找该进程的pid  用kill-9 关闭  然后再次尝试</p><p>ps -ef | grep [项目名]或[:端口号]    ps: 看到端口号前的 <strong>:</strong> 了么</p><p>lsof -i :端口号</p><p>kill -9 [pid]</p>]]></content>
      
      
      
        <tags>
            
            <tag> my CSDN blog </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
